/* The following code was generated by JFlex 1.7.0 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ScannerImplementation_A1.jflex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\14\1\15\1\15\1\15\22\0\1\33\1\3\1\34"+
    "\1\22\1\3\1\3\1\3\1\17\1\31\1\32\1\3\1\7\1\24"+
    "\1\7\1\20\1\30\2\26\6\27\2\21\1\3\1\35\1\3\1\3"+
    "\1\3\1\3\1\25\33\0\1\23\1\0\1\3\1\3\1\17\1\10"+
    "\1\1\1\10\1\12\1\2\1\13\1\3\1\3\1\4\2\3\1\5"+
    "\1\3\1\3\1\16\1\3\1\3\1\3\1\5\1\6\1\3\2\3"+
    "\1\11\1\3\1\3\3\0\1\3\6\0\1\15\32\0\1\33\u15df\0"+
    "\1\33\u097f\0\13\33\35\0\1\15\1\15\5\0\1\33\57\0\1\33"+
    "\u0fa0\0\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\2\1\1\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\1\12\4\0\1\13\1\7"+
    "\2\0\1\14\1\0\1\6\1\0\1\6\1\0\1\2"+
    "\1\6\1\0\1\6\4\0\2\6\2\0\1\6\3\0"+
    "\1\6\5\0\1\6\1\15\1\6\1\0\2\6\4\0"+
    "\1\6\1\0\1\6\1\0\2\6\2\0\1\6\6\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\0\3\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\3\0\2\6\1\0\2\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\1\0\3\6\2\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\3\6\1\0"+
    "\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\36\0\36\0\170\0\226"+
    "\0\264\0\322\0\36\0\36\0\360\0\u010e\0\36\0\u012c"+
    "\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\u021c"+
    "\0\u023a\0\u0258\0\36\0\u0276\0\u0294\0\u02b2\0\u02d0\0\36"+
    "\0\36\0\360\0\u02ee\0\36\0\u010e\0\u030c\0\u032a\0\u0348"+
    "\0\u0366\0\36\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a"+
    "\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\132\0\u04ec"+
    "\0\u050a\0\u0528\0\u0546\0\u0564\0\u0582\0\u05a0\0\u05be\0\u05dc"+
    "\0\36\0\u05fa\0\u0618\0\u0636\0\u0654\0\u0672\0\u0690\0\u06ae"+
    "\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762\0\u0780\0\u079e"+
    "\0\u07bc\0\u07da\0\u07f8\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e"+
    "\0\u08ac\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e"+
    "\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\u0a14\0\u0a32\0\u0a50\0\u0a6e"+
    "\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6\0\u0b04\0\u0b22\0\u0b40"+
    "\0\u0b5e\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30"+
    "\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20"+
    "\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10"+
    "\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00"+
    "\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0"+
    "\0\u100e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\6\3\1\4\4\3\2\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\2\2\10\1\3\1\13"+
    "\1\14\1\5\1\15\1\16\37\0\13\3\2\0\1\3"+
    "\1\0\2\3\4\0\3\3\11\0\1\17\13\0\1\20"+
    "\1\21\4\0\2\21\26\0\1\22\1\23\4\0\2\23"+
    "\10\0\1\24\2\0\1\24\1\0\1\25\2\0\2\24"+
    "\4\0\1\23\1\10\1\26\2\0\1\27\2\10\1\30"+
    "\6\0\1\31\1\32\1\0\1\32\1\0\1\33\2\0"+
    "\1\34\1\35\1\33\2\0\1\36\4\0\1\37\5\0"+
    "\1\40\31\0\1\41\10\0\23\42\1\43\10\42\1\44"+
    "\1\42\14\45\1\5\21\45\21\0\1\46\4\0\2\46"+
    "\10\0\1\47\1\0\1\17\1\47\1\0\1\25\2\0"+
    "\2\47\4\0\1\46\1\21\1\50\2\0\1\27\2\21"+
    "\1\51\25\0\1\52\17\0\1\24\2\0\1\24\1\0"+
    "\1\25\2\0\2\24\5\0\1\23\1\53\2\0\1\27"+
    "\2\23\15\0\1\54\11\0\1\55\4\0\2\55\12\0"+
    "\1\17\13\0\1\56\1\57\4\0\2\57\10\0\1\24"+
    "\2\0\1\24\1\0\1\25\2\0\2\24\4\0\1\53"+
    "\1\0\1\26\2\0\1\27\2\0\1\30\14\0\1\60"+
    "\10\0\1\61\1\62\4\0\2\62\27\0\1\63\4\0"+
    "\2\63\15\0\1\64\12\0\1\65\3\0\1\66\16\0"+
    "\1\67\10\0\1\70\1\10\1\71\3\0\2\10\7\0"+
    "\2\72\4\0\1\73\1\72\1\0\2\72\5\0\1\72"+
    "\1\74\3\0\2\72\15\0\1\67\10\0\1\70\1\10"+
    "\1\75\3\0\2\10\15\0\1\76\12\0\1\77\3\0"+
    "\2\100\6\0\15\101\1\0\20\101\23\0\1\42\10\0"+
    "\1\42\3\0\1\47\1\0\1\17\1\47\1\0\1\25"+
    "\2\0\2\47\5\0\1\46\1\102\2\0\1\27\2\46"+
    "\15\0\1\103\11\0\1\104\4\0\2\104\10\0\1\47"+
    "\1\0\1\17\1\47\1\0\1\25\2\0\2\47\4\0"+
    "\1\102\1\0\1\50\2\0\1\27\2\0\1\51\26\0"+
    "\1\105\4\0\2\105\10\0\1\24\2\0\1\24\1\0"+
    "\1\25\2\0\2\24\6\0\1\53\2\0\1\27\31\0"+
    "\1\55\4\0\2\55\15\0\1\25\11\0\1\55\3\0"+
    "\1\27\2\55\27\0\1\106\4\0\2\106\10\0\1\107"+
    "\1\0\1\17\1\107\4\0\2\107\4\0\1\106\1\57"+
    "\1\110\3\0\2\57\1\111\25\0\1\61\1\62\4\0"+
    "\2\62\27\0\1\112\4\0\2\112\10\0\1\113\2\0"+
    "\1\113\4\0\2\113\4\0\1\112\1\62\1\114\3\0"+
    "\2\62\1\115\14\0\1\25\11\0\1\63\1\116\2\0"+
    "\1\27\2\63\12\0\1\17\21\0\1\117\11\0\1\120"+
    "\1\0\1\120\40\0\1\121\12\0\1\122\2\0\1\123"+
    "\1\66\1\0\1\124\26\0\1\23\4\0\2\23\7\0"+
    "\1\120\7\0\1\125\1\126\3\0\1\127\20\0\2\72"+
    "\4\0\1\130\1\72\1\0\2\72\5\0\1\72\1\131"+
    "\2\0\1\132\2\72\1\133\6\0\2\134\1\0\1\17"+
    "\3\0\1\134\1\0\2\134\5\0\1\134\4\0\2\134"+
    "\10\0\1\125\1\0\1\125\33\0\1\126\1\0\1\126"+
    "\35\0\1\17\21\0\2\135\10\0\1\127\1\0\1\127"+
    "\40\0\1\136\12\0\1\137\2\0\1\140\2\100\1\141"+
    "\7\0\1\47\1\0\1\17\1\47\1\0\1\25\2\0"+
    "\2\47\6\0\1\102\2\0\1\27\31\0\1\104\4\0"+
    "\2\104\12\0\1\17\2\0\1\25\11\0\1\104\3\0"+
    "\1\27\2\104\12\0\1\17\2\0\1\25\11\0\1\105"+
    "\1\142\2\0\1\27\2\105\10\0\1\107\1\0\1\17"+
    "\1\107\4\0\2\107\5\0\1\106\1\143\3\0\2\106"+
    "\15\0\1\144\11\0\1\145\4\0\2\145\10\0\1\107"+
    "\1\0\1\17\1\107\4\0\2\107\4\0\1\143\1\0"+
    "\1\110\5\0\1\111\26\0\1\146\4\0\2\146\10\0"+
    "\1\113\2\0\1\113\4\0\2\113\5\0\1\112\1\147"+
    "\3\0\2\112\15\0\1\150\11\0\1\151\4\0\2\151"+
    "\10\0\1\113\2\0\1\113\4\0\2\113\4\0\1\147"+
    "\1\0\1\114\5\0\1\115\26\0\1\152\4\0\2\152"+
    "\15\0\1\25\12\0\1\116\2\0\1\27\14\0\1\17"+
    "\2\0\1\121\12\0\1\153\2\0\1\123\1\117\1\0"+
    "\1\154\14\0\1\64\16\0\1\66\13\0\1\17\21\0"+
    "\1\155\16\0\1\121\12\0\1\122\2\0\1\123\2\0"+
    "\1\124\14\0\1\156\16\0\1\157\35\0\1\160\10\0"+
    "\2\72\4\0\1\73\1\72\1\0\2\72\5\0\1\72"+
    "\4\0\2\72\15\0\1\67\10\0\1\70\1\10\4\0"+
    "\2\10\15\0\1\76\16\0\2\100\7\0\2\161\1\0"+
    "\1\17\3\0\1\161\1\0\2\161\5\0\1\161\4\0"+
    "\2\161\15\0\1\130\12\0\1\131\2\0\1\132\2\0"+
    "\1\133\6\0\2\162\4\0\1\163\1\162\1\0\2\162"+
    "\5\0\1\162\4\0\2\162\7\0\2\164\5\0\1\164"+
    "\1\0\2\164\5\0\1\164\4\0\2\164\7\0\2\134"+
    "\1\0\1\17\2\0\1\130\1\134\1\0\2\134\5\0"+
    "\1\134\1\165\2\0\1\132\2\134\1\166\11\0\1\17"+
    "\2\0\1\136\12\0\1\167\2\0\1\140\2\135\1\170"+
    "\11\0\1\17\21\0\2\171\15\0\1\136\12\0\1\137"+
    "\2\0\1\140\2\0\1\141\14\0\1\172\16\0\2\173"+
    "\34\0\2\174\12\0\1\17\2\0\1\25\12\0\1\142"+
    "\2\0\1\27\12\0\1\107\1\0\1\17\1\107\4\0"+
    "\2\107\6\0\1\143\34\0\1\145\4\0\2\145\12\0"+
    "\1\17\14\0\1\145\4\0\2\145\12\0\1\17\14\0"+
    "\1\146\1\175\3\0\2\146\10\0\1\113\2\0\1\113"+
    "\4\0\2\113\6\0\1\147\34\0\1\151\4\0\2\151"+
    "\27\0\1\152\1\176\3\0\2\152\12\0\1\17\2\0"+
    "\1\121\12\0\1\153\2\0\1\123\2\0\1\154\33\0"+
    "\1\177\13\0\1\17\15\0\1\200\3\0\1\155\1\0"+
    "\1\201\33\0\1\157\31\0\1\202\3\0\1\157\1\0"+
    "\1\203\14\0\1\121\12\0\1\204\2\0\1\123\1\160"+
    "\10\0\2\161\1\0\1\17\3\0\1\161\1\0\2\161"+
    "\5\0\1\161\1\205\3\0\2\161\1\206\6\0\2\162"+
    "\5\0\1\162\1\0\2\162\5\0\1\162\1\207\3\0"+
    "\2\162\1\210\6\0\2\162\5\0\1\162\1\0\2\162"+
    "\5\0\1\162\4\0\2\162\7\0\2\164\4\0\1\130"+
    "\1\164\1\0\2\164\5\0\1\164\1\211\2\0\1\132"+
    "\2\164\12\0\1\17\2\0\1\130\12\0\1\165\2\0"+
    "\1\132\2\0\1\166\6\0\2\212\5\0\1\212\1\0"+
    "\2\212\5\0\1\212\4\0\2\212\12\0\1\17\2\0"+
    "\1\136\12\0\1\167\2\0\1\140\2\0\1\170\33\0"+
    "\2\213\12\0\1\17\15\0\1\214\3\0\2\171\1\215"+
    "\33\0\2\173\30\0\1\216\3\0\2\173\1\217\14\0"+
    "\1\136\12\0\1\220\2\0\1\140\2\174\12\0\1\17"+
    "\15\0\1\175\35\0\1\176\17\0\1\17\2\0\1\121"+
    "\12\0\1\221\2\0\1\123\1\177\13\0\1\17\15\0"+
    "\1\200\5\0\1\201\33\0\1\222\31\0\1\202\5\0"+
    "\1\203\33\0\1\223\16\0\1\121\12\0\1\204\2\0"+
    "\1\123\14\0\1\17\15\0\1\205\5\0\1\206\6\0"+
    "\2\224\5\0\1\224\1\0\2\224\5\0\1\224\4\0"+
    "\2\224\30\0\1\207\5\0\1\210\6\0\2\225\5\0"+
    "\1\225\1\0\2\225\5\0\1\225\4\0\2\225\15\0"+
    "\1\130\12\0\1\211\2\0\1\132\11\0\2\212\1\0"+
    "\1\17\2\0\1\130\1\212\1\0\2\212\5\0\1\212"+
    "\1\226\2\0\1\132\2\212\12\0\1\17\2\0\1\136"+
    "\12\0\1\227\2\0\1\140\2\213\12\0\1\17\15\0"+
    "\1\214\5\0\1\215\33\0\2\230\30\0\1\216\5\0"+
    "\1\217\33\0\2\231\15\0\1\136\12\0\1\220\2\0"+
    "\1\140\14\0\1\17\2\0\1\121\12\0\1\221\2\0"+
    "\1\123\14\0\1\17\15\0\1\175\3\0\1\222\31\0"+
    "\1\176\3\0\1\223\10\0\2\224\1\0\1\17\3\0"+
    "\1\224\1\0\2\224\5\0\1\224\1\175\3\0\2\224"+
    "\7\0\2\225\5\0\1\225\1\0\2\225\5\0\1\225"+
    "\1\176\3\0\2\225\12\0\1\17\2\0\1\130\12\0"+
    "\1\226\2\0\1\132\14\0\1\17\2\0\1\136\12\0"+
    "\1\227\2\0\1\140\14\0\1\17\15\0\1\175\3\0"+
    "\2\230\30\0\1\176\3\0\2\231\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4140];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\4\1\2\11\2\1\1\11"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\1\1\0\1\1\4\0\2\1\2\0"+
    "\1\1\3\0\1\1\5\0\1\1\1\11\1\1\1\0"+
    "\2\1\4\0\1\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\1\6\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\4\0\1\1\1\0\3\1\3\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\3\0\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\3\1\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 14: break;
          case 2: 
            { System.out.println("Identifier: " + yytext());
            } 
            // fall through
          case 15: break;
          case 3: 
            { 
            } 
            // fall through
          case 16: break;
          case 4: 
            { System.out.println("Quotation Mark: " + yytext());
            } 
            // fall through
          case 17: break;
          case 5: 
            { System.out.println("Dot: " + yytext());
            } 
            // fall through
          case 18: break;
          case 6: 
            { System.out.println("Number: " + yytext());
            } 
            // fall through
          case 19: break;
          case 7: 
            { System.out.println("Unquotation Mark: " + yytext());
            } 
            // fall through
          case 20: break;
          case 8: 
            { System.out.println("Left Parenthesis: " + yytext());
            } 
            // fall through
          case 21: break;
          case 9: 
            { System.out.println("Right Parenthesis: " + yytext());
            } 
            // fall through
          case 22: break;
          case 10: 
            { System.out.println("Boolean: " + yytext());
            } 
            // fall through
          case 23: break;
          case 11: 
            { System.out.println("Open Vector: " + yytext());
            } 
            // fall through
          case 24: break;
          case 12: 
            { System.out.println("String: " + yytext());
            } 
            // fall through
          case 25: break;
          case 13: 
            { System.out.println("Character: " + yytext());
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
